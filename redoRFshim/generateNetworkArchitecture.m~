%%generate the Network Architecture of sizes 
function [layers,options] = generateNetworkArchitecture(firstLayerSize,secondLayerSize,thirdLayerSize,XVal,YVal)
sizeImgLayer = [1,4,1];
layers = [
    imageInputLayer(sizeImgLayer,'Normalization','rescale-symmetric')
    
    fullyConnectedLayer(firstLayerSize)
    reluLayer
    
    fullyConnectedLayer(secondLayerSize)
    reluLayer
    
    fullyConnectedLayer(thirdLayerSize)
    reluLayer
    
    fullyConnectedLayer(15)
    regressionLayer];

miniBatchSize  = 500;
if nargin == 3
    options = trainingOptions('sgdm', ...
        'MiniBatchSize',miniBatchSize, ...
        'MaxEpochs',4000, ...
        'InitialLearnRate',0.24^2, ...
        'LearnRateSchedule','piecewise', ...
        'LearnRateDropFactor',0.9, ...
        'LearnRateDropPeriod',1000, ...
        'Shuffle','every-epoch', ...
        'Plots','training-progress', ...
        'Verbose',false,'ExecutionEnvironment','cpu');
elseif nargin == 5
    options = trainingOptions('sgdm', ...
    'MiniBatchSize',miniBatchSize, ...
    'MaxEpochs',40, ...
    'InitialLearnRate',0.4, ...
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropFactor',0.1, ...
    'LearnRateDropPeriod',10, ...
    'Shuffle','every-epoch', ...
    'ValidationData',{XVal,YVal}, ...
    'ValidationFrequency', 50, ...
    'Plots','training-progress', ...
    'Verbose',false,'ExecutionEnvironment','cpu');
else
    error('Check how many arguments you have given this function!');
end


end

%predRF = predict(net,sum(sum(sum(sum(mapSet))))/numel(mapSet)*res.MTarg);
%predRF = predRF(8:end) - 1i*[0 predRF(1:7)];
%vars.coeffs = predRF';
%vars.coeffs = vars.coeffs/max(abs(vars.coeffs));
%acshim(MIDs,'meB',vars);